#!/usr/bin/env python

import argparse
import signal
import sys
import textwrap
import aws

__author__ = 'Bharath Srinivas'
created_on = '01-02-2017'


def signal_handler(signal, handler):
    print '\nYou pressed Ctrl+C!'
    sys.exit(0)


if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal_handler)

    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=textwrap.dedent('''The available commands are:
  list        Lists all the instances
  status      Shows the status of the specified instance
  show-ip     Shows the public and private IP address of an instance
  start       Starts the specified instance
  stop        Stops the specified instance
  lambda      Performs lambda related operations
                                     '''))
    subparsers = parser.add_subparsers(dest='cmd', metavar='command',
                                       help='sub-command to run')

    parser.add_argument('-v', '--version', action='version', version='%(prog)s 1.1 alpha release',
                        help='shows the version and exit')

    li = subparsers.add_parser('list', description='List description')
    li.add_argument('choice', nargs='?', choices=['id', 'name'], type=str, action='store', default='name',
                    metavar='arg', help='Use id/name to list all instances based on their ID or name')

    st = subparsers.add_parser('status', description='Status description')
    st.add_argument('instance_st', action='store', type=int, metavar='instance',
                    help='The instance\'s number from the list')

    run = subparsers.add_parser('start', description='Start description')
    run.add_argument('st_instance', action='store', type=int, metavar='instance',
                     help='The instance\'s number from the list')

    halt = subparsers.add_parser('stop', description='Stop description')
    halt.add_argument('halt_instance', action='store', type=int, metavar='instance',
                      help='The instance\'s number from the list')

    get_ip = subparsers.add_parser('show-ip', description='Show IP description')
    get_ip.add_argument('show_ip', action='store', type=int, metavar='instance',
                        help='The instance\'s number from the list')
    
    lambda_func = subparsers.add_parser('lambda', description='Lambda description')
    lambda_func.add_argument('-l', '--list', action='store_true',
                             help='Lists all the lambda aws irrespective of region')
    lambda_func.add_argument('-i', '--invoke', action='store', type=int, metavar='FUNCTION',
                             help='Invokes the specified lambda function synchronously')

    args = parser.parse_args()

    if args.cmd == 'list':
        if args.choice == 'id':
            aws.list_instances('id')
        else:
            aws.list_instances('name')

    elif args.cmd == 'status':
        print aws.instance_state(args.instance_st)

    elif args.cmd == 'start':
        print aws.start_instance(args.st_instance)

    elif args.cmd == 'stop':
        print aws.stop_instance(args.halt_instance)

    elif args.cmd == 'show-ip':
        print aws.get_ip_address(args.show_ip)

    elif args.cmd == 'lambda':
        if args.list:
            aws.list_lambdas()
        elif args.invoke:
            print aws.invoke_lambda(args.invoke)
        else:
            print 'Invalid number of arguments for command "lambda". Please type lambda -h to view the sub-commands.'
